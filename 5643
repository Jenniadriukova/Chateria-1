{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO2VSNWQNkffv1ae3OZcgm9",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jenniadriukova/Chateria-1/blob/main/5643\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l_n69AK1b9ra"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mYGATy4Jy86D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#1\n",
        "fakty = {\n",
        "    'ojciec':[('Jan','Anna'),('Igor','Marta')],\n",
        "    'matka':[('Kasia','Anna'),('Wiktoria','Marta')]\n",
        "    }\n",
        "def czy_jest_ojcem(osoba1, osoba2):\n",
        "    return (osoba1, osoba2) in fakty.get('ojciec', [])\n",
        "\n",
        "print(czy_jest_ojcem('Jan', 'Anna'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7lOwLvutb-X0",
        "outputId": "712bf8bb-714c-493f-fdc1-d67a225a7bd9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#2\n",
        "\n",
        "fakty ={\n",
        "    'ojciec':[('Jan','Anna'),('Igor','Marta')],\n",
        "    'matka':[('Kasia','Anna'),('Wiktoria','Marta')]\n",
        "    }\n",
        "\n",
        "def czy_jest_rodzicem (osoba1, osoba2):\n",
        "\n",
        "    return (osoba1, osoba2) in fakty.get('ojciec', []) or (osoba1, osoba2) in fakty.get('matka', [])\n",
        "\n",
        "print(czy_jest_rodzicem ('Jan', 'Anna'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vzOAPHajcaOc",
        "outputId": "7ab9c99d-3464-47d4-f84c-ecfcf11d62bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3\n",
        "fakty ={\n",
        "    'ojciec':[('Jan','Anna'),('Igor','Marta')],\n",
        "    'matka':[('Kasia','Anna'),('Wiktoria','Marta')]\n",
        "    }\n",
        "\n",
        "def czy_jest_rodzicem(osoba1, osoba2):\n",
        " return (osoba1, osoba2) in fakty.get('ojciec', []) or (osoba1, osoba2) in fakty.get('matka', [])\n",
        "\n",
        "def dodaj_dziadków():\n",
        "  fakty['ojciec'].extend([('Marian','Anna'),('Mikolaj','Marta')])\n",
        "\n",
        "\n",
        "def czy_jest_dziadkiem (osoba1, osoba2):\n",
        "\n",
        "\n",
        "    for rodzic in fakty.get('ojciec', []) + fakty.get('matka', []):\n",
        "        if rodzic[1] == osoba2:\n",
        "            if czy_jest_rodzicem(osoba1, rodzic[0]):\n",
        "                return True\n",
        "    return False\n",
        "\n",
        "\n",
        "print(czy_jest_dziadkiem('Marian','Anna'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PMQtxsLveNF2",
        "outputId": "ac8fa7ba-b902-4603-fb8e-3b27073a4947"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#4\n",
        "\n",
        "fakty = {\n",
        "    'ojciec': [('Lida', 'Anna'), ('Anna', 'Kasia')],\n",
        "    'matka': [('Maria', 'Anna'), ('Ewa', 'Kasia')]\n",
        "}\n",
        "\n",
        "def czy_jest_rodzicem(osoba1, osoba2):\n",
        "    return (osoba1, osoba2) in fakty.get('ojciec', []) or (osoba1, osoba2) in fakty.get('matka', [])\n",
        "\n",
        "def czy_jest_siostra(x, y):\n",
        "    for rodzic in fakty.get('ojciec', []) + fakty.get('matka', []):\n",
        "        if rodzic[1] == x:\n",
        "            if czy_jest_rodzicem(rodzic[0], y):\n",
        "                if x != y:\n",
        "                     return True\n",
        "    return False\n",
        "\n",
        "print(czy_jest_siostra('Lida', 'Anna'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1ZGvxMi9gSHA",
        "outputId": "3d7b14de-e1c6-4b3f-9d68-ba0806b0c6df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#5\n",
        "fakty = {\n",
        "    'ojciec': [('Jan', 'Anna'), ('Piotr', 'Kasia')],\n",
        "    'matka': [('Maria', 'Anna'), ('Ewa', 'Kasia')]\n",
        "}\n",
        "\n",
        "def czy_jest_rodzicem(osoba1, osoba2):\n",
        "    return (osoba1, osoba2) in fakty['ojciec'] or (osoba1, osoba2) in fakty['matka']\n",
        "\n",
        "print(czy_jest_rodzicem('Jan', 'Anna'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FSOOZDj7khyn",
        "outputId": "848d241c-8edc-410d-dc69-8eb19d98df94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#6\n",
        "fakty = {\n",
        "    'ojciec': [('Jan', 'Anna'), ('Piotr', 'Kasia')],\n",
        "    'matka': [('Maria', 'Anna'), ('Ewa', 'Kasia')]\n",
        "}\n",
        "\n",
        "# Funkcja do znajdowania dzieci rodzica\n",
        "def czyj_rodzic(rodzic):\n",
        "    dzieci = []\n",
        "    # Przeszukiwanie faktów o ojcach\n",
        "    for ojciec, dziecko in fakty['ojciec']:\n",
        "        if ojciec == rodzic:\n",
        "            dzieci.append(dziecko)\n",
        "    # Przeszukiwanie faktów o matkach\n",
        "    for matka, dziecko in fakty['matka']:\n",
        "        if matka == rodzic:\n",
        "            dzieci.append(dziecko)\n",
        "    return dzieci\n",
        "\n",
        "print(czyj_rodzic('Piotr'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AR65GqPwl8KT",
        "outputId": "b94d079b-214e-4556-b085-a6e6679e479a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Kasia']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#7\n",
        "\n",
        "fakty = {\n",
        "    'ojciec': [('Jan', 'Anna'), ('Piotr', 'Kasia')],\n",
        "    'matka': [('Maria', 'Anna'), ('Ewa', 'Kasia')]\n",
        "}\n",
        "\n",
        "def rodzic_bez_cut(rodzic):\n",
        "    dzieci = []\n",
        "    for ojciec, dziecko in fakty['ojciec']:\n",
        "        if ojciec == rodzic:\n",
        "            dzieci.append(dziecko)\n",
        "    for matka, dziecko in fakty['matka']:\n",
        "        if matka == rodzic:\n",
        "            dzieci.append(dziecko)\n",
        "    return dzieci\n",
        "\n",
        "def rodzic_cut(rodzic):\n",
        "    for ojciec, dziecko in fakty['ojciec']:\n",
        "        if ojciec == rodzic:\n",
        "            return dziecko\n",
        "    for matka, dziecko in fakty['matka']:\n",
        "        if matka == rodzic:\n",
        "            return dziecko\n",
        "\n",
        "print(\"rodzic_bez_cut:\")\n",
        "print(rodzic_bez_cut('Jan'))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "587mnC9BoAIS",
        "outputId": "9c901079-4af8-470a-e7f4-b97048a5315f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "rodzic_bez_cut:\n",
            "['Anna']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#8\n",
        "\n",
        "fakty = {\n",
        "    'ojciec': [('Jan', 'Anna'), ('Piotr', 'Kasia')],\n",
        "    'matka': [('Maria', 'Anna'), ('Ewa', 'Kasia')]\n",
        "}\n",
        "def rodzic(x, y):\n",
        "\n",
        "\n",
        "    for ojciec, dziecko in fakty['ojciec']:\n",
        "        if ojciec == x and dziecko == y:\n",
        "            return True\n",
        "\n",
        "    for matka, dziecko in fakty['matka']:\n",
        "        if matka == x and dziecko == y:\n",
        "            return True\n",
        "    return False\n",
        "\n",
        "print(rodzic('Jan', 'Anna'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BQ0pbNyipJ2_",
        "outputId": "ee1688b5-60bc-4757-8c9a-564679403c47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#9\n",
        "\n",
        "fakty = {\n",
        "    'ojciec': [('Jan', 'Anna'), ('Piotr', 'Kasia')],\n",
        "    'matka': [('Maria', 'Anna'), ('Ewa', 'Kasia')],\n",
        "     'wiek': {\n",
        "        'Jan': 50,\n",
        "        'Maria': 48,\n",
        "        'Piotr': 45,\n",
        "        'Ewa': 42,\n",
        "        'Anna': 20,\n",
        "        'Kasia': 18\n",
        "    }\n",
        "}\n",
        "def starszy(x, y):\n",
        "    wiek_x = fakty['wiek'].get(x)\n",
        "    wiek_y = fakty['wiek'].get(y)\n",
        "\n",
        "    if wiek_x is None or wiek_y is None:\n",
        "        return False\n",
        "\n",
        "        if wiek_x > wiek_y:\n",
        "          return True\n",
        "    return False\n",
        "\n",
        "print(starszy('Jan', 'Anna'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KmsbtzjsqzI9",
        "outputId": "f3c42b08-24a0-4fec-beb7-1f388d2cbb10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#10\n",
        "\n",
        "fakty = {\n",
        "    'ojciec': [('Jan', 'Anna'), ('Piotr', 'Kasia')],\n",
        "    'matka': [('Maria', 'Anna'), ('Ewa', 'Kasia')],\n",
        "     'wiek': {\n",
        "        'Jan': 50,\n",
        "        'Maria': 48,\n",
        "        'Piotr': 45,\n",
        "        'Ewa': 42,\n",
        "        'Anna': 20,\n",
        "        'Kasia': 18\n",
        "    }\n",
        "}\n",
        "\n",
        "def wiek_wiecej_niz(n):\n",
        "    print(f\"Osoby starsze niż {n} lat:\")\n",
        "    znaleziono = False\n",
        "    for osoba, wiek in fakty['wiek'].items():\n",
        "        if wiek > n:\n",
        "            print(osoba)\n",
        "            znaleziono = True\n",
        "    if not znaleziono:\n",
        "        print(\"Brak osób spełniających kryterium.\")\n",
        "\n",
        "print(wiek_wiecej_niz(40))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FEI2OVFpvAkj",
        "outputId": "aba396a0-c813-4235-b4b0-5d20bd391e54"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Osoby starsze niż 40 lat:\n",
            "Jan\n",
            "Maria\n",
            "Piotr\n",
            "Ewa\n",
            "None\n"
          ]
        }
      ]
    }
  ]
}